// <auto-generated />
using System;
using EFDataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EFDataAccess.Migrations
{
    [DbContext(typeof(PerfumeContext))]
    [Migration("20200701092257_added data")]
    partial class addeddata
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Domain.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = " Designer Versace has 65 perfumes in our fragrance base. The earliest edition was created in 1981 and the newest is from 2019.",
                            IsActive = false,
                            IsDeleted = false,
                            Name = "Versace"
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Find your signature fragrance with a long-lasting luxury perfume from Lancôme.",
                            IsActive = false,
                            IsDeleted = false,
                            Name = "Lancome"
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Find Gucci's luxury Italian fragrances for men & women",
                            IsActive = false,
                            IsDeleted = false,
                            Name = "Gucci"
                        });
                });

            modelBuilder.Entity("Domain.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("PerfumeId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PerfumeId");

                    b.HasIndex("UserId");

                    b.ToTable("Carts");

                    b.HasData(
                        new
                        {
                            Id = 30,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            IsDeleted = false,
                            PerfumeId = 40,
                            Quantity = 2,
                            UserId = 50
                        });
                });

            modelBuilder.Entity("Domain.FragranceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.ToTable("FragranceTypes");

                    b.HasData(
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            IsDeleted = false,
                            Name = "Eau De Parfum"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            IsDeleted = false,
                            Name = "Eau De Toilette"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            IsDeleted = false,
                            Name = "Pure Perfume"
                        });
                });

            modelBuilder.Entity("Domain.Gender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Genders");

                    b.HasData(
                        new
                        {
                            Id = 10,
                            Name = "Male"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Female"
                        });
                });

            modelBuilder.Entity("Domain.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Delivered")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Shiped")
                        .HasColumnType("bit");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("Domain.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("PerfumeId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("PerfumeId");

                    b.ToTable("OrderItem");
                });

            modelBuilder.Entity("Domain.Perfume", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Discount")
                        .HasColumnType("int");

                    b.Property<string>("Fragrance")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<int>("FragranceTypeId")
                        .HasColumnType("int");

                    b.Property<int>("GenderId")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("NumberOfAvailable")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("FragranceTypeId");

                    b.HasIndex("GenderId");

                    b.ToTable("Perfumes");

                    b.HasData(
                        new
                        {
                            Id = 40,
                            BrandId = 10,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Discount = 0,
                            Fragrance = "Eros",
                            FragranceTypeId = 5,
                            GenderId = 10,
                            Image = "perfumeimage.jpg",
                            IsActive = false,
                            IsDeleted = false,
                            NumberOfAvailable = 200,
                            Price = 50m
                        },
                        new
                        {
                            Id = 41,
                            BrandId = 12,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Discount = 20,
                            Fragrance = "Rush",
                            FragranceTypeId = 6,
                            GenderId = 11,
                            Image = "rush.jpg",
                            IsActive = false,
                            IsDeleted = false,
                            NumberOfAvailable = 100,
                            Price = 110m
                        },
                        new
                        {
                            Id = 42,
                            BrandId = 11,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Discount = 10,
                            Fragrance = "Summertime",
                            FragranceTypeId = 5,
                            GenderId = 10,
                            Image = "summertime.jpg",
                            IsActive = false,
                            IsDeleted = false,
                            NumberOfAvailable = 300,
                            Price = 90m
                        },
                        new
                        {
                            Id = 43,
                            BrandId = 12,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Discount = 50,
                            Fragrance = "Code",
                            FragranceTypeId = 6,
                            GenderId = 11,
                            Image = "code.jpg",
                            IsActive = false,
                            IsDeleted = false,
                            NumberOfAvailable = 70,
                            Price = 300m
                        },
                        new
                        {
                            Id = 44,
                            BrandId = 11,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Discount = 0,
                            Fragrance = "Summer Love",
                            FragranceTypeId = 7,
                            GenderId = 10,
                            Image = "summer.jpg",
                            IsActive = false,
                            IsDeleted = false,
                            NumberOfAvailable = 50,
                            Price = 200m
                        },
                        new
                        {
                            Id = 45,
                            BrandId = 10,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Discount = 30,
                            Fragrance = "Jasmin",
                            FragranceTypeId = 5,
                            GenderId = 11,
                            Image = "jasmin.jpg",
                            IsActive = false,
                            IsDeleted = false,
                            NumberOfAvailable = 400,
                            Price = 150m
                        });
                });

            modelBuilder.Entity("Domain.PerfumeScentNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PerfumeId")
                        .HasColumnType("int");

                    b.Property<int>("ScentNoteId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PerfumeId");

                    b.HasIndex("ScentNoteId");

                    b.ToTable("PerfumeScentNotes");

                    b.HasData(
                        new
                        {
                            Id = 20,
                            PerfumeId = 40,
                            ScentNoteId = 21
                        },
                        new
                        {
                            Id = 21,
                            PerfumeId = 40,
                            ScentNoteId = 22
                        },
                        new
                        {
                            Id = 22,
                            PerfumeId = 41,
                            ScentNoteId = 23
                        },
                        new
                        {
                            Id = 23,
                            PerfumeId = 42,
                            ScentNoteId = 23
                        },
                        new
                        {
                            Id = 24,
                            PerfumeId = 42,
                            ScentNoteId = 22
                        },
                        new
                        {
                            Id = 25,
                            PerfumeId = 43,
                            ScentNoteId = 21
                        },
                        new
                        {
                            Id = 26,
                            PerfumeId = 44,
                            ScentNoteId = 21
                        },
                        new
                        {
                            Id = 27,
                            PerfumeId = 44,
                            ScentNoteId = 23
                        },
                        new
                        {
                            Id = 28,
                            PerfumeId = 45,
                            ScentNoteId = 21
                        },
                        new
                        {
                            Id = 29,
                            PerfumeId = 45,
                            ScentNoteId = 22
                        },
                        new
                        {
                            Id = 30,
                            PerfumeId = 45,
                            ScentNoteId = 23
                        });
                });

            modelBuilder.Entity("Domain.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 13,
                            Name = "User"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("Domain.ScentNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.ToTable("ScentNotes");

                    b.HasData(
                        new
                        {
                            Id = 21,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            IsDeleted = false,
                            Name = "Citrus"
                        },
                        new
                        {
                            Id = 22,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            IsDeleted = false,
                            Name = "Vanilla"
                        },
                        new
                        {
                            Id = 23,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            IsDeleted = false,
                            Name = "Floral"
                        });
                });

            modelBuilder.Entity("Domain.UseCaseLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Actor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Data")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("UseCaseName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UseCaseLogs");
                });

            modelBuilder.Entity("Domain.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.HasKey("Id");

                    b.HasAlternateKey("Username");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 50,
                            Address = "Neka Adresa 123",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "luka@gmail.com",
                            FirstName = "Luka",
                            IsActive = false,
                            IsDeleted = false,
                            LastName = "Lukic",
                            Password = "lukicluka",
                            RoleId = 13,
                            Username = "lukalukic"
                        },
                        new
                        {
                            Id = 51,
                            Address = "Neka Adresa 1233",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "luka@gmail.com",
                            FirstName = "Luka",
                            IsActive = false,
                            IsDeleted = false,
                            LastName = "Lukic",
                            Password = "lukicadmin",
                            RoleId = 14,
                            Username = "adminlukic"
                        });
                });

            modelBuilder.Entity("Domain.UserUseCase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("UseCaseId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserUseCases");

                    b.HasData(
                        new
                        {
                            Id = 20,
                            UseCaseId = 12,
                            UserId = 50
                        },
                        new
                        {
                            Id = 21,
                            UseCaseId = 16,
                            UserId = 50
                        },
                        new
                        {
                            Id = 22,
                            UseCaseId = 13,
                            UserId = 50
                        },
                        new
                        {
                            Id = 23,
                            UseCaseId = 8,
                            UserId = 50
                        },
                        new
                        {
                            Id = 24,
                            UseCaseId = 25,
                            UserId = 50
                        },
                        new
                        {
                            Id = 25,
                            UseCaseId = 9,
                            UserId = 50
                        },
                        new
                        {
                            Id = 26,
                            UseCaseId = 15,
                            UserId = 50
                        },
                        new
                        {
                            Id = 27,
                            UseCaseId = 14,
                            UserId = 50
                        },
                        new
                        {
                            Id = 28,
                            UseCaseId = 10,
                            UserId = 51
                        },
                        new
                        {
                            Id = 29,
                            UseCaseId = 7,
                            UserId = 51
                        },
                        new
                        {
                            Id = 30,
                            UseCaseId = 2,
                            UserId = 51
                        },
                        new
                        {
                            Id = 31,
                            UseCaseId = 5,
                            UserId = 51
                        },
                        new
                        {
                            Id = 32,
                            UseCaseId = 3,
                            UserId = 51
                        },
                        new
                        {
                            Id = 33,
                            UseCaseId = 6,
                            UserId = 51
                        },
                        new
                        {
                            Id = 34,
                            UseCaseId = 4,
                            UserId = 51
                        },
                        new
                        {
                            Id = 35,
                            UseCaseId = 11,
                            UserId = 51
                        },
                        new
                        {
                            Id = 36,
                            UseCaseId = 22,
                            UserId = 51
                        },
                        new
                        {
                            Id = 37,
                            UseCaseId = 8,
                            UserId = 51
                        },
                        new
                        {
                            Id = 38,
                            UseCaseId = 25,
                            UserId = 51
                        },
                        new
                        {
                            Id = 39,
                            UseCaseId = 9,
                            UserId = 51
                        });
                });

            modelBuilder.Entity("Domain.Cart", b =>
                {
                    b.HasOne("Domain.Perfume", "Perfume")
                        .WithMany("PerfumesInCart")
                        .HasForeignKey("PerfumeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.User", "User")
                        .WithMany("PerfumesInCart")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Order", b =>
                {
                    b.HasOne("Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.OrderItem", b =>
                {
                    b.HasOne("Domain.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Perfume", "Perfume")
                        .WithMany("OrderItems")
                        .HasForeignKey("PerfumeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Perfume", b =>
                {
                    b.HasOne("Domain.Brand", "Brand")
                        .WithMany("Perfumes")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.FragranceType", "FragranceType")
                        .WithMany("Perfumes")
                        .HasForeignKey("FragranceTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Gender", "Gender")
                        .WithMany("Perfumes")
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.PerfumeScentNote", b =>
                {
                    b.HasOne("Domain.Perfume", "Perfume")
                        .WithMany("PerfumeScentNotes")
                        .HasForeignKey("PerfumeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.ScentNote", "ScentNote")
                        .WithMany("PerfumesScentNote")
                        .HasForeignKey("ScentNoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.User", b =>
                {
                    b.HasOne("Domain.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.UserUseCase", b =>
                {
                    b.HasOne("Domain.User", "User")
                        .WithMany("UserUseCases")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
